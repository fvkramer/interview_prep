
1. Call Stack
  - single threaded single concurrent language
  - single call stack + heap + queueu
    - push onto call stack. when return, pop off
  - heap - objects are allocated in heap. unstructured region of memory.
        - memoery allocation to variables and objects happens here
  - queue - JS runtime contains message queue, list of messages to be processed and associated callback functions to execut

  Event Loop
    - blocking script - slow function keeps stack occupied/blocked
    - to stop async code from blocking stack, use asynchronous callbacks
      - run code and give it a callback function(does not block call stack)


  A. Javascript Runtime
    Call Stack            Heap

    function call         memory allocation

  B. Web APIs (browser provided)
    
  C. Callback Queue
      - Event Loop pushes from callback queue to JS runtime


2. Primitive Types
  - All JS numbers are floating point. 
    - encoded internally as 64 bit binary
    - sign occupies bit 63  (bit 0 means positive)
    - exponent bits 52 to 62 (contains digits of number)
    - fraction bits 0 to 51 (indicates where point is)

3. Value Types and Reference Types
  - Primitive Data Types passed by Value
    - Boolean, null, undefined, String, Number
  - Objects passed by reference
    - Array, Function, Object

  - Primitive passing by value means value does not change
  - Object passed by reference. variables don't actually have the object


  - Reassigning reference replaces old reference

  == and === used on reference-type variables. they check reference
  if they have same values but are distinct objects, comparison retruns false

  When equality operators comparing primitives, they simply check values
  So to compare two objects, easiest way is to turn them into strings and then compare the strings

  var arr1str = JSON.stringify(arr1);
  var arr2str = JSON.stringify(arr2);

  arr1str === arr2str  // true


  When passing arguments into functions, the values are copied over, so variable reassignment does not occur

  Pure Functions - do not affect anything in outside scope
      - does not affect any variables on outside
      - can make copy of object and return that. doesn't change the actual object

4. Implicit, Explicit, Nominal, Structuring, and Duck Typing

  - JS attempts to coerce value type to expected type

  Non-Numeric Values in Numeric Expressions
    - Strings
    - String with numeric operators turned to number
    - String with non numeric operators returns NaN

    - Except or '+'
      - if '+'
        string concatentation

  Javascript Object conversions result in [object Object]

  "name" + {}  //  'name[object Object]
  every JS object has a toString method that is called when coercion occurs

  Array objects

  toString() method on Arrays is like .join() without arguments
  concatenating a string with an array -> string + array.toString()

  Number(true) // 1
  Number(false) // 0
  Number("")  // 0 


  Always be explicit in comparisons

  NaN !== NaN
  ECMAScript 6 introduced NaN

  Number.isNaN

5. == vs ===

left one type converts. don't use unless you're an OG

6. Function Scope, Block Scope, Lexical Scope

  - scope "bubbles" and creates containers/buckets in which
    variables, functions declared
  - function based scope 

  - Principle of "Least Authority"
    - design API to expose only what is necessary
    - nest functions within a function to protect scope
    - private details should be kept private

  - Global "Namespaces" 
    - multiple libraries loaded into program can collide with each other if 
      internal/private functions and functions

    - such libraries create single variable declaration, object, in global scope that 
      encapsulates functionality. this object is then the 'namespace'


  - let allows declarations of variables in any arbitrary block of code
    - var and let should coexist.

  - try {} catch (err) {} block scoping


  Garbage Collection
    - anything declared in block scope is garbaged collected 
    - if declared in open scope, not garbage collected because things have closure

7. Expression vs Statement

{} + 1     // 1
{2} + 2    // 2
{2+2} + 3  // 3
{2+2} - 3  // -3

Expressions can act like statements. Statements cannot act like Expressions


Expressions are JS code that result in a SINGLE value.
Expressions don't change state

const assignedVariable = 2;
assignedVariable + 4   //expression
console.log(assignedVariable)  // 2

Statements perform actions and do things

if (true) {9+9}

above line is a statement but returns a value that canot be used

Function declaration is statement
function foo (func) {
  return func.name
}

Function expression is expression - anonymous function
console.log(foo(function () {} ))


**
When declaring function where JS expects value, it attempts
to treat is as value and throws and error

When declaring function at global level script(where not expecting value)
it results in function declaration

Converting Expressions to Statements

2+2 // expression statement
foo(); //expression statement

to convert expression to expression statement, use semicolon
2+2 expression
2+2; expression statement


With semi-colon, can chain multiple statements

const a; function foo() {}; const b = 2

Comma operator allows chaining multiple expressions, returning only last expression

console.log( (1+2,3,4) ) // 4


IIFE (Immediately Invoked Function Expressions)

*** read more about it


{} + 1 //1

{2} + 2 // 2

{2+2} + 3 // 3

{2+2} -3 // -3

Block statement is statement. whatever returned by block statement
coerced to 0

8. IIFE, Modules, and Namespaces

Functions vs Function Expressions

var sayHi = function() {
  alert(msg)
}

sayHi();

the right side of equals sign is "function expression"

IIFE 

Style 1

funtion() {
  alert("Hello")
}();

Style 2

(function() {
    alert("I am not an IIFE yet!");
});

used to wrap function execution in its own scope. so variables created
in function don't affect global scope

wraps function expression in parentheses

(function() {
    alert("I am not an IIFE yet!");
})(); 

executes function in own scope not to affect global namespace

function called after created in stack and removed from memory

Therefore, if creating global namespace, wrap everything in IIFE to not pollute

9. Message Queue and Event Loop


10. setTimeout, setInterval, requestAnimationFrame

setTimeout - runs once after interval

  function sayHi(phrase, who) {
  alert( phrase + ', ' + who );
  }

  let timeId = setTimeout(sayHi, 1000, "Hello", "John");
  
  call to setTimeout returns "time identifier"
  "time identifier" can be used to cancel execution

  clearTimeout(timerId)


setInterval - runs everytime on interval


let timerId = setInterval(() => alert('tick'), 2000);

// after 5 seconds stop
setTimeout(() => { clearInterval(timerId); alert('stop'); }, 5000);

Alert window freezes timer in Chrome/Opera/Safari
Does not freeze in IE, Firefox

2 ways to run something regularly

1. setInterval    2. recursive setTimeout


Recursive setTimeout guarantees a delay between the executions, setInterval â€“ does not.

When function passed to setInterval/setTimeout, internal reference
created to it and saved in scheduler. It prevents function from being  garbage collected

only clears when using     clearInterval

Splitting CPU-hungry tasks


let i = 0;

let start = Date.now();

function count() {

  // do a piece of the heavy job (*)
  do {
    i++;
  } while (i % 1e6 != 0);

  if (i == 1e9) {
    alert("Done in " + (Date.now() - start) + 'ms');
  } else {
    setTimeout(count, 0); // schedule the new call (**)
  }

}

count();


Browser UI fully functional during "counting" process

In-browser scripts can show progress bar to user. Browser 
usually does "repainting" after script complete

Therefore, if we run one huge function, even if it changes something,
changes not reflected until document finishes


requestAnimationFrame

Previously, to automate something quickly, used

setInterval(()=>***, 1000/60); to get 60fps

Paul Irish introduces   requestAnimationFrame

  - browser can optimize it, so animations are smoother
  - Animations in inactive tabs stop, so CPU chills
  - Battery-friendly


function repeatOften() {
  // Do whatever
  requestAnimationFrame(repeatOften);
}
requestAnimationFrame(repeatOften);

call once to start, and then recursively calls it

requestAnimationFrame returns an id like setTimeout or setInterval that can be cancelled


11. Javascript Engines
  - Different platforms use different JS Engines
  - JS Engine =~ type of virtual machine/software-driven emulation of comp system

  - many types of VMs. classified by how precisely that emulate or substitute physical machines

  System VM - complete emulation of platform 
  Process Virtual Machine - less fully functional. runs one program or process

  JS Engine is a process virtual machine that interprets and executes JS code

  Different layer engines on browsers

  Layout engine that powers browser Web Page display
  Lower level JS engines that interpret and execute code


  Goal of JS Engine

  take JS code and converts to optimized code that can be 
  embedded into app or read by browser

  Each browser implements version of ECMAScript (JS dialect)
  Different engines because all work with different Web browser or runtimes like Node.js


  How JS Engine Work?

  JSCore has six building blocks - analyze, interpret, optimize, garbage collect JS code
  Two main engines are WebKit's JSCore and Google's V8  Engine
     Both leveraged by NativeScript


  JSCore 
    1. leical analysis
    2. breaks source into series of tokens/strings
    3. tokens analyzed by parser for syntax and built into syntax tree
    4. Then processes analzye and execute bytecode produced by parser


    TLDR: JS takes source code, breaks into strinsgs, a.k.a lexes it, take those strings and
    converts into bytecode that a compiler can understand and then executes it

  Google V8
    1. Writen in C++
    2. compiles and executes JS source code, handles memory allocaiton, garbage collects
    3. Two compilers that assemble source into machine code
      - Full-codegen - fast compiler that produces un-optimized code
      - Crankshaft - slower compiled that produces fast, optimized code


  Meaning for Web Developers

    - Goal of all engines to produce optimized code
    - Developers need to understand differences inherent in browsers
    - Understand why certain scripts may run slower on one browser than another

    - Especially important for mobile Developers



12. Bitwise Operators, Type Arrays, Array Buffers

13. DOM and Layout Trees

14. Factories and Classes

15. this, call, apply, bind

16. new, Constructor, instanceof, Instances

17. Prototype Inheritance, Prototype Chain

18. Object.create, Object.assign

19. map, reduce, filter

20. Pure Functions, Side Effects, State Mutation

21. Closures

22. Higher Order Functions

23. Recursion

24. Collections and Generators

25. Promises

26. async/await

27. Data structures

28. Expensive Operation and Big O Notation

29. Algos

30. Inheritance, Polymorphism, Code Reuse

31. Design Patterns

32. Partial Applications, Currying, Compose, Principle

33. Clean Code


35. JS Tools 
  - Webpack, Bable, ESLint, Mocha, Karma, Grunt
