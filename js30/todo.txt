js30 projects

advanced js features

-functional programming paradigm
- prototypal chain
- currie
- closures, scope, modules, patterns
- promises and async
- http, ajax, axios
-lexical scoping
- higher order functions
- runtime execution and call stack model
- contexts and OO design
- static typing and cooercion
- d shoshnikov
- ecma5 v ecma6
- webpack and babel
  - cost of optimizing when huge code base
- mantissa
- regex

Web Performance

- web workers, service workers, shared workers
- code optimization and code splitting
- bundling/minifying


Content

1. Call Stack
2. Primitive Types
3. Value Types, Reference Types
4. Implicit, Explicit, Nominal, Structuring, Duck typing
5. == vs === vs typeof
6. Function Scope, Block Scope, Lexical Scope
7. Expression vs Statement
8. IIFE, Modules, Namespaces
9. Message Queue, Event Loop
10. setTimeout, setInterval, requestAnimationFrame
11. Javascript Engines
12. Bitwise Operators, Type Arrays, Array Buffers
13. DOM, Layout Trees
14. Factories and Classes
15. this, call, apply, bind
16. new, Constructor, instanceof, Instances
17. Prototype Inheritance and Prototype Chain
18. Object.create, Object.assign
19. map, reduce, filter
20 .Pure Functions, Side Effects, State Mutation
21. Closures
22. High Order Functions
23. Recursion
24. Collections and Generators
25. promises
26. async/await
27. Data Structures
28. Expensive Operation and Big O Notation
29. Algos
30. Inheritance, Polymorphism, Code Reuse
31. Design patterns
32. Partial Applications, Currying, Compose and Pipe
33. Clean Code
34. Delegation
35. JS Tools