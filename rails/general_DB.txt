PROGRAMMING LANGUAGES

High Level -> C/C++ -> Assembly -> Binary

Interpreted                                   Compiled
source code is the program (scripts)          produces program written in Assembly
scripts portable. Different interpreters      compiled language architecture specific to machine's
act diff. Unix shells reaed each statment     platform. 
and send result. Perl first entire file       FASTER than interpreted, however might need
Slower, easier to debug. JS, Python           to recompile on other machines
Any comp can run with appropriate 
interpreter


Intermediate to Computer-specific compiled programs are designed for runtime environments
Java example. Similar to compiled language, but source code => byte code
for runtime environment's "virtual machine".
"VM" interprets byte code => computer specific commands

Advantage - runtime environment only compiles needed pieces of code. 'just-in-time compiling'
Disad - poorly designed code -> runtime environment compiling all code.  


Statically Typed - (verifying and enforcing contraints) at compile time
Dynamically Typed = type checking at run time

Duck Typing - determines if an object can be used for a particular purpose


###################

DB:

TCO - total cost of ownership

Relational vs Non Relational
Postgresql  -   MongoDB


Relational (Relational Databas Management System)

Stores data in rows and columns

Theory/Purpose of Non Relational
  - build upon relational DB. Incorporate NoSQL innovations for modern applications

Strengths of Relational DB:
  - suppor relational algebra and have foreign keys, joins, and multi-row transactions
    - NoSQL does not have
  - expressive query language and secondary indexes
    - secondary indexes supported natively by database
  - strong consistency
    - immediately read what's written to database
  - enterprise management and integration

Lacking/NoSQL offers:
  - Flexible data model
    - allows flexible data columns in database
  - Scalability and Performance
    - includes sharding and/or partioning
      - allows scaling on commodity hardware -> unlim. growth with higher throughput and lower latency
        - throughput = amount of data passing through system
        - latency - delay between transfer of data and instruction to transfer
  - designed for highly available systes. replication to auto synch data across servers,rack, and data centers



NoSQL does not have all capabilities that relational DB has.
MongoDB incorporates NoSQL with SQL

DB Theory

Integrity of Data important. RDBMS supports ACID
(Atomicity, Consistency, Isolation, Durability)

Atomicity - indivisible and irreducible transaction that is all or nothing
    - atomicity guarantee means no partial DB updates

Consistency - db transaction changes affected data in ways adhering to DB rules/data constraints
Isolation - determines how transaction integrity visible to other users and systems
  - if user creates purchase order but not purchase order lines, is header available to all other users?
    - Lower Isolation allows many users to access the same data at the same time
      - increases number of concurrency effects (such as dirty reads or lost updates) users may encounter
  - Higher isolation level reduces types of concurrency effects users may encounter, but requires more system resources 
  and increases chance one transaction blocks another

Durability - guarantees that committed transactions persists
  - for ex. if someone books a seat on a flight, then seat booked even if system crashes


Due to exponential growth of data in past decade, needed different DB theory/model


No single software that is NoSQL
  over 200 projects that fall into NoSQL category
  each project diff. strengths and weakness

Cons
- no common standardized query language 
- NoSQL db do not enforce data constraints in server. Developers have to code them
- No ACID properties
- No data modeling. Limits type of queries that can be run efficiently
- Security flaws. As more features added, "simplicity" decreases
- So many products -> harder to decide which one to use

Populat NoSQL DB:
  - MongodDB, Cassandra, Redis


Misc/Key Terms/Vocab

Runtime - software/instructions executed while program running
        - instructions I did not write specifically
        - Low-level languages like C have small runtimes. Higher level language like
        - Obj C have extensive runtime.
        ---Code to implement features of language itself

Sharding - break database into smaller chunks, "shards" and spread across
          number of servers -> bettter scaling

    Theory 
      - growth DB transactions and volumes large impact on response times
      - DB relies on CPU, Memory, Data
      - Reach limits on single server. send to multiple

Indexing - optimizes performance by minimizing number of disk access required
        for query processing.
        - database index is an ordered structure to quickly locate and access data in DB table
        - indexes created with database columns
          - first column Search key that contains primary key of table
          - second column reference to disk block 
      - O (log N)

SQL Injection

  - SQL statements inserted into entry field for execution
    - when user input incorrectly filtered for string literal escape characters
    - or user input not strongly typed

  SQL injection -> spoof identity, tamper w existing data, cause repudiation
              such as changing balances, destroy data, make unavailable to admins, etc.

  *Escape character = character that causes alternative interpretation of following character
                      - leads to alternative SQL query
                    
  statement = "SELECT * FROM users WHERE name = '" + userName + "';"
  ' OR '1'='1

  selects all info from user

  can chain multiple SQL statements in one line to drop table

  Incorrect Type Handling

  statement := "SELECT * FROM userinfo WHERE id =" + a_variable + ";"

  user intends for integer, but receiving string. can pass:

  1;DROP TABLE users

  SELECT * FROM userinfo WHERE id=1; DROP TABLE users;


  Mitigation


  Parameterized statements
    - instead of using string variable, use parameters. 
    - it would treat SQL injection as invalid parameter value


  Escaping (error-prone)
    - escape characters that have special meaning
    - SQL DBMS has blacklist of characters that need to be escaped
        - ex:   '   needs to be replaced with two single ''
  Pattern Check
    - parameters can be checked if value valid representation for given type

  Top Attacks

  SQL Injection + Insufficient Authentication
  SQL Injection + DDoS attacks
  SQL Injection + DNS hijacking
  SQL Injection + XSS

  CSRF



  n + 1


  class User < ApplicationRecord
  # ...

  def n_plus_one_post_comment_counts
    posts = self.posts
    # SELECT *
    #   FROM posts
    #  WHERE posts.author_id = ?
    #
    # where `?` gets replaced with `user.id`

    post_comment_counts = {}
    posts.each do |post|
      # This query gets performed once for each post. Each db query
      # has overhead, so this is very wasteful if there are a lot of
      # `Post`s for the `User`.
      post_comment_counts[post] = post.comments.length
      # SELECT *
      #   FROM comments
      #  WHERE comments.post_id = ?
      #
      # where `?` gets replaced with `post.id`
    end

    post_comment_counts
  end
end

N + 1


//Solution - fetch all Comments for all Posts at once

Active Record lets you specify associations to prefetch. Then no need to query again

posts = user.posts.includes(:comments)


class User < ApplicationRecord
  # ...

  def includes_post_comment_counts
    # `includes` *prefetches the association* `comments`, so it doesn't
    # need to be queried for later. `includes` does not change the
    # type of the object returned (in this example, `Post`s); it only
    # prefetches extra data.
    posts = self.posts.includes(:comments)
    # Makes two queries:
    # SELECT *
    #   FROM posts
    #  WHERE post.author_id = ?
    #
    # where `?` is replaced with `user.id`.
    #
    # ...and...
    #
    # SELECT *
    #   FROM comments
    #  WHERE comments.post_id IN ?
    #
    # where `?` is replaced with `self.posts.map(&:id)`, the `Array`
    # of `Post` ids.

    post_comment_counts = {}
    posts.each do |post|
      # doesn't fire a query, since already prefetched the association
      # way better than N+1
      #
      # NB: if we write `post.comments.count` ActiveRecord will try to
      # be super-smart and run a `SELECT COUNT(*) FROM comments WHERE
      # comments.post_id = ?` query. This is because ActiveRecord
      # understands `#count`. But we already fetched the comments and
      # don't want to go back to the DB, so we can avoid this behavior
      # by calling `Array#length`.
      post_comment_counts[post] = post.comments.length
    end

    post_comment_counts
  end
end


//Executes 2 queries


Joining Tables can also resolve N + 1 problem

The problem wih using     includes     it returns a lot of data
When doing too much in Ruby, want to do the work in SQL instead


class User
  # ...

  def joins_post_comment_counts
    # We use `includes` when we need to prefetch an association and
    # use those associated records. If we only want to *aggregate* the
    # associated records somehow, `includes` is wasteful, because all
    # the associated records are pulled down into the app.
    #
    # For instance, if a `User` has posts with many, many comments, we
    # would pull down every single comment. This may be more rows than
    # our Rails app can handle. And we don't actually care about all
    # the individual rows, we just want the count of how many there
    # are.
    #
    # When we want to do an "aggregation" like summing the number of
    # records (and don't care about the individual records), we want
    # to use `joins`.

    posts_with_counts = self
      .posts
      .select("posts.*, COUNT(*) AS comments_count") # more in a sec
      .joins(:comments)
      .group("posts.id") # "comments.post_id" would be equivalent
    # in SQL:
    #   SELECT posts.*, COUNT(*) AS comments_count
    #     FROM posts
    #    JOINS comments
    #       ON comments.post_id = posts.id
    #    WHERE posts.author_id = #{self.id}
    # GROUP BY posts.id
    #
    # As we've seen before using `joins` does not change the type of
    # object returned: this returns an `Array` of `Post` objects.
    #
    # But we do want some extra data about the `Post`: how many
    # comments were left on it. We can use `select` to pick up some
    # "bonus fields" and give us access to extra data.
    #
    # Here, I would like to have the database count the comments per
    # post, and store this in a column named `comments_count`. The
    # magic is that ActiveRecord will give me access to this column by
    # dynamically adding a new method to the returned `Post` objects;
    # I can call `#comments_count`, and it will access the value of
    # this column:

    posts_with_counts.map do |post|
      # `#comments_count` will access the column we `select`ed in the
      # query.
      [post.title, post.comments_count]
    end
  end
end